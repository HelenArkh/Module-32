#pragma checksum "C:\Users\alena\source\repos\Module-32\CoreVSApp\MvcStartApp\Views\Feedback\Add.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c0fbd070e5eed2225bcf7919eeb9399626d630d9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Feedback_Add), @"mvc.1.0.view", @"/Views/Feedback/Add.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\alena\source\repos\Module-32\CoreVSApp\MvcStartApp\Views\_ViewImports.cshtml"
using MvcStartApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\alena\source\repos\Module-32\CoreVSApp\MvcStartApp\Views\_ViewImports.cshtml"
using MvcStartApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c0fbd070e5eed2225bcf7919eeb9399626d630d9", @"/Views/Feedback/Add.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9c6813c071ceeda9a7f9331cc9b2b8fb5a72ee91", @"/Views/_ViewImports.cshtml")]
    public class Views_Feedback_Add : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\alena\source\repos\Module-32\CoreVSApp\MvcStartApp\Views\Feedback\Add.cshtml"
  
   ViewData["Title"] = "View project authors";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    table {
        border-spacing: 0 15px;
        align-self: center;
    }

    th {
        background-color: #4287f5;
        color: white;
    }

    th,
    td {
        width: 150px;
        text-align: center;
        border: none;
        padding: 5px;
    }

    h2 {
        color: #4287f5;
    }

    .submit-button {
        position: absolute;
        margin-left: 140px;
    }
</style>

<div id=""main-block"" class=""text-center"">
    <div>
        <h3 style=""text-align: left"">Оставьте отзыв о проекте здесь</h3>
        <br>
        <table>
            <tr>
                <td>Ваше имя</td>
                <td><input type=""text"" name=""From"" /> </td>
            </tr>
            <tr>
                <td>Ваш отзыв</td>
                <td><input type=""text"" name=""Text"" /></td>
            </tr>
        </table>
        <br>
        <div class=""submit-button"">
            <input type=""submit"" value=""Отправить"" onclick=""ProcessForm()"" />
        <");
            WriteLiteral(@"/div>
    </div>
</div>

<script>

    function ProcessForm() {
        // Инициализация объекта формы
        let data = new FormData();

        // Вытаскиваем информацию из полей на странице и добавляем в объект формы
        data.set(""From"", document.querySelector('[name=""From""]').value)
        data.set(""Text"", document.querySelector('[name=""Text""]').value)

        // создаем объект запроса
        let postRequest = new XMLHttpRequest();
        postRequest.open('POST', document.URL, true); /* true = запрос будет выполнен асинхронно */

        // посылаем запрос
        postRequest.send(data);

        // Функция - обработчик результата с сервера
        postRequest.onload = function () {
            // сохраняем ответ сервера. не лишним будет также добавить проверку на успешный запрос
            let serverMessage = this.response;

            /* Код ниже изменяет значение формы */

            // Находим контейнер
            let element = document.getElementsByClassName(");
            WriteLiteral(@"""container"")[1];
            // Удаляем вложенный контейнер с формой
            element.children[0].remove();

            // Создаем новый элемент
            let paragraph = document.createElement(""h5"");
            // Добавляем ему стиль
            paragraph.style = ""text-align : center""
            // Сохраняем в него сообщение сервера
            paragraph.innerText = serverMessage;

            // Добавляем дочерные элементы на страницу
            element.appendChild(document.createElement(""br""))
            element.appendChild(paragraph)
        };
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
